using UnityEditor;
using UnityEngine;
using System;
using System.Threading.Tasks;
using System.Collections.Generic;


public class AdvancedTextureToolEditor : EditorWindow
{
    private Texture2D quickConvertSourceTexture;
    private Texture2D splitModeSourceTexture;
    private Texture2D rChannel, gChannel, bChannel, aChannel;
    private int currentTab = 0;
    private string quickConvertFileName = "CombinedTexture_QuickConvert";
    private string manualCombinationFileName = "CombinedTexture_Manual";
    private Texture2D quickConvertPreviewTexture;
    private Texture2D splitModePreviewTexture;
    private Texture2D manualCombinationPreviewTexture;

    private int[] leftSelection = new int[4];
    private int[] rightSelection = new int[4];
    private string[] textureOptions = { "None", "Metallic", "Roughness", "AO", "Height", "Glossiness", "Specular", "Emission Mask", "Opacity", "Translucency", "Cavity", "Detail Mask", "Thickness", "Subsurface Mask", "Curvature", "Dirt Mask" };

    private string[] splitChannelNames = { "Metallic", "Roughness", "AO", "Alpha" };
    private string quickConvertExportPath = "";  // Quick Convert 模式的导出路径
    private string splitModeExportPath = "";     // Split 模式的导出路径
    private string manualCombinationExportPath = "";  // Manual Combination 模式的导出路径
    
    // 添加这个变量
    private Texture2D[] channelPreviews = new Texture2D[4];

    [MenuItem("Tools/Advanced Texture Tool")]
    public static void ShowWindow()
    {
        GetWindow<AdvancedTextureToolEditor>("Advanced Texture Tool");
    }

     private void OnGUI()
    {
        currentTab = GUILayout.Toolbar(currentTab, new string[] { "Quick Convert Mode", "Split Mode", "Manual Combination Mode" });

        if (currentTab == 0)
        {
            DisplayQuickConvertMode();
        }
        else if (currentTab == 1)
        {
            DisplaySplitTextureMode();
        }
        else if (currentTab == 2)
        {
            DisplayManualCombinationMode();
        }

        Texture2D previewTexture = GetCurrentPreviewTexture();
        if (previewTexture != null)
        {
            GUILayout.Label("Preview Image", EditorStyles.boldLabel);
            GUILayout.BeginHorizontal();
            GUILayout.FlexibleSpace();

            if (previewTexture.format != TextureFormat.RGBA32 && previewTexture.format != TextureFormat.ARGB32)
            {
                previewTexture = ConvertToSupportedFormat(previewTexture);
            }

            GUILayout.Label(new GUIContent(previewTexture), GUILayout.Width(256), GUILayout.Height(256));
            GUILayout.FlexibleSpace();
            GUILayout.EndHorizontal();
        }
    }


    private void DisplayQuickConvertMode()
    {
        GUILayout.Label("Quick Convert Mode", EditorStyles.boldLabel);

        quickConvertSourceTexture = (Texture2D)EditorGUILayout.ObjectField("Select Texture to Convert", quickConvertSourceTexture, typeof(Texture2D), false);

        if (quickConvertSourceTexture != null)
        {
            EnsureTextureIsReadable(quickConvertSourceTexture);

            GUILayout.Label("Original Channels", EditorStyles.boldLabel);

            GUILayout.BeginHorizontal();
            GUILayout.Label("R Channel:");
            leftSelection[0] = EditorGUILayout.Popup(leftSelection[0], textureOptions);
            GUILayout.EndHorizontal();

            GUILayout.BeginHorizontal();
            GUILayout.Label("G Channel:");
            leftSelection[1] = EditorGUILayout.Popup(leftSelection[1], textureOptions);
            GUILayout.EndHorizontal();

            GUILayout.BeginHorizontal();
            GUILayout.Label("B Channel:");
            leftSelection[2] = EditorGUILayout.Popup(leftSelection[2], textureOptions);
            GUILayout.EndHorizontal();

            GUILayout.BeginHorizontal();
            GUILayout.Label("Alpha Channel:");
            leftSelection[3] = EditorGUILayout.Popup(leftSelection[3], textureOptions);
            GUILayout.EndHorizontal();

            GUILayout.Label("Target Channels", EditorStyles.boldLabel);

            string[] filteredOptions = GetSelectedTextureOptions(leftSelection);

            GUILayout.BeginHorizontal();
            GUILayout.Label("Target R Channel:");
            rightSelection[0] = EditorGUILayout.Popup(rightSelection[0], filteredOptions);
            GUILayout.EndHorizontal();

            GUILayout.BeginHorizontal();
            GUILayout.Label("Target G Channel:");
            rightSelection[1] = EditorGUILayout.Popup(rightSelection[1], filteredOptions);
            GUILayout.EndHorizontal();

            GUILayout.BeginHorizontal();
            GUILayout.Label("Target B Channel:");
            rightSelection[2] = EditorGUILayout.Popup(rightSelection[2], filteredOptions);
            GUILayout.EndHorizontal();

            GUILayout.BeginHorizontal();
            GUILayout.Label("Target Alpha Channel:");
            rightSelection[3] = EditorGUILayout.Popup(rightSelection[3], filteredOptions);
            GUILayout.EndHorizontal();

            quickConvertFileName = EditorGUILayout.TextField("Export File Name:", quickConvertFileName);

            if (GUILayout.Button("Convert"))
            {
                Texture2D combinedTexture = CombineChannels(quickConvertSourceTexture, rightSelection);
                ShowPreview(combinedTexture, ref quickConvertPreviewTexture);
            }

            if (GUILayout.Button("Export"))
            {
    Texture2D combinedTexture = CombineChannels(quickConvertSourceTexture, rightSelection);
    ShowPreview(combinedTexture, ref quickConvertPreviewTexture);
    ExportTextureWithCustomPath(combinedTexture, ref quickConvertExportPath, quickConvertFileName);
            }

            if (GUILayout.Button("Clear Selections"))
            {
        quickConvertSourceTexture = null;
    quickConvertPreviewTexture = null;
    leftSelection = new int[4];
    rightSelection = new int[4];

    // 清空路径
    quickConvertExportPath = "";

    Debug.Log("All settings in Quick Convert Mode have been cleared, including export path.");
            }
        }
        else
        {
            GUILayout.Label("Please select a source texture first!");
        }
    }


private void DisplaySplitTextureMode()
{
    GUILayout.Label("Split Mode", EditorStyles.boldLabel);

    splitModeSourceTexture = (Texture2D)EditorGUILayout.ObjectField("Source Texture", splitModeSourceTexture, typeof(Texture2D), false);

    if (splitModeSourceTexture != null)
    {
        EnsureTextureIsReadable(splitModeSourceTexture);

        if (GUILayout.Button("Split"))
        {
     SplitTextureInBackground(splitModeSourceTexture, previews =>
    {
        for (int i = 0; i < 4; i++)
        {
            channelPreviews[i] = previews[i];
        }
    });
        }

        for (int i = 0; i < 4; i++)
        {
            GUILayout.BeginHorizontal();
            GUILayout.Label($"Channel {i + 1} Preview:");

            if (channelPreviews[i] != null)
            {
                GUILayout.Label(new GUIContent(channelPreviews[i]), GUILayout.Width(64), GUILayout.Height(64));
            }
            else
            {
                GUILayout.Label("No Preview Available", GUILayout.Width(128));
            }

            GUILayout.Label("File Name:");
            splitChannelNames[i] = GUILayout.TextField(splitChannelNames[i], GUILayout.Width(200));
            GUILayout.EndHorizontal();
        }

        if (GUILayout.Button("Export All Channels"))
        {
            for (int i = 0; i < 4; i++)
            {
                if (channelPreviews[i] != null && !string.IsNullOrEmpty(splitChannelNames[i]))
                {
                    string fileName = $"{splitChannelNames[i]}.png";
                ExportSplitTextures(channelPreviews, splitChannelNames, ref splitModeExportPath);
                }
                else if (string.IsNullOrEmpty(splitChannelNames[i]))
                {
                    Debug.LogWarning($"Channel {i + 1} skipped because no file name was provided.");
                }
            }
        }

        if (GUILayout.Button("Clear All"))
        {
        // 清空纹理和预览
    splitModeSourceTexture = null;
    for (int i = 0; i < 4; i++)
    {
        channelPreviews[i] = null;
        splitChannelNames[i] = $"Channel {i + 1}";
    }

    // 清空路径
    splitModeExportPath = "";

    Debug.Log("All settings in Split Mode have been cleared, including export path.");
        }
    
    }
    else
    {
        GUILayout.Label("Please select a source texture to split.");
    }
}


    private void DisplayManualCombinationMode()
    {
        GUILayout.Label("Manual Combination Mode", EditorStyles.boldLabel);

        rChannel = (Texture2D)EditorGUILayout.ObjectField("Red Channel", rChannel, typeof(Texture2D), false);
        gChannel = (Texture2D)EditorGUILayout.ObjectField("Green Channel", gChannel, typeof(Texture2D), false);
        bChannel = (Texture2D)EditorGUILayout.ObjectField("Blue Channel", bChannel, typeof(Texture2D), false);
        aChannel = (Texture2D)EditorGUILayout.ObjectField("Alpha Channel", aChannel, typeof(Texture2D), false);

        manualCombinationFileName = EditorGUILayout.TextField("Export File Name", manualCombinationFileName);

        if (GUILayout.Button("Combine Channels"))
        {
            Texture2D combinedTexture = CombineChannels(rChannel, gChannel, bChannel, aChannel);
            ShowPreview(combinedTexture, ref manualCombinationPreviewTexture);
        }

        if (GUILayout.Button("Export Combined Texture"))
        {
    Texture2D combinedTexture = CombineChannels(rChannel, gChannel, bChannel, aChannel);
    ShowPreview(combinedTexture, ref manualCombinationPreviewTexture);
    ExportTextureWithCustomPath(combinedTexture, ref manualCombinationExportPath, manualCombinationFileName);

        if (GUILayout.Button("Clear Selections"))
        {
       rChannel = null;
    gChannel = null;
    bChannel = null;
    aChannel = null;
    manualCombinationPreviewTexture = null;

    // 清空路径
    manualCombinationExportPath = "";

    Debug.Log("All settings in Manual Combination Mode have been cleared, including export path.");
        }
    }
    }



    private Texture2D ConvertToSupportedFormat(Texture2D sourceTexture)
{
    if (sourceTexture == null) return null;

    // 创建新的 Texture2D，确保格式为 RGBA32
    Texture2D convertedTexture = new Texture2D(sourceTexture.width, sourceTexture.height, TextureFormat.RGBA32, false);
    for (int x = 0; x < sourceTexture.width; x++)
    {
        for (int y = 0; y < sourceTexture.height; y++)
        {
            convertedTexture.SetPixel(x, y, sourceTexture.GetPixel(x, y));
        }
    }
    convertedTexture.Apply();
    return convertedTexture;
}


private async void SplitTextureInBackground(Texture2D texture, Action<Texture2D[]> callback)
{
    if (texture == null)
    {
        Debug.LogWarning("请选择一个源纹理！");
        callback?.Invoke(new Texture2D[4]);
        return;
    }

    int width = texture.width;
    int height = texture.height;

    // 创建存储像素数据的数组（每个通道一个）
    Color[][] channelData = new Color[4][];
    for (int i = 0; i < 4; i++)
    {
        channelData[i] = new Color[width * height];
    }

    // 在主线程中获取所有像素
    Color[] pixels = texture.GetPixels();

    // 在后台线程中处理像素分离逻辑
    await Task.Run(() =>
    {
        for (int i = 0; i < pixels.Length; i++)
        {
            Color pixel = pixels[i];
            channelData[0][i] = new Color(pixel.r, pixel.r, pixel.r, 1); // R 通道
            channelData[1][i] = new Color(pixel.g, pixel.g, pixel.g, 1); // G 通道
            channelData[2][i] = new Color(pixel.b, pixel.b, pixel.b, 1); // B 通道
            channelData[3][i] = new Color(pixel.a, pixel.a, pixel.a, 1); // A 通道
        }
    });

    // 在主线程中创建纹理并应用像素数据
    Texture2D[] previews = new Texture2D[4];
    for (int i = 0; i < 4; i++)
    {
        previews[i] = new Texture2D(width, height, TextureFormat.RGBA32, false);
        previews[i].SetPixels(channelData[i]);
        previews[i].Apply(); // 应用像素更改
    }

    // 调用回调并更新 UI
    callback?.Invoke(previews);
}


    private Texture2D CombineChannels(Texture2D inputTexture, int[] outputSelection)
    {
        if (inputTexture == null)
        {
            Debug.LogWarning("Please select a source texture!");
            return null;
        }

        if (!inputTexture.isReadable)
        {
            Debug.LogError("Source texture is not readable. Please enable Read/Write in Texture Import Settings.");
            return null;
        }

        // 验证输入数据的长度
        if (outputSelection.Length != 4)
        {
            Debug.LogError("Input and output selection arrays must have exactly 4 elements.");
            return null;
        }

        int width = inputTexture.width;
        int height = inputTexture.height;
        Texture2D combinedTexture = new Texture2D(width, height, TextureFormat.RGBA32, false);

        // 遍历每个像素
        for (int x = 0; x < width; x++)
        {
            for (int y = 0; y < height; y++)
            {
                Color pixel = inputTexture.GetPixel(x, y);

                // 根据 inputSelection 获取当前像素的通道值
                float[] inputChannels = new float[4]
                {
                    GetChannelValue(pixel, 1), // R
                    GetChannelValue(pixel, 2), // G
                    GetChannelValue(pixel, 3), // B
                    GetChannelValue(pixel, 4)  // A
                };

                // 根据 outputSelection 重新排列通道
                float rValue = inputChannels[outputSelection[0]];
                float gValue = inputChannels[outputSelection[1]];
                float bValue = inputChannels[outputSelection[2]];
                float aValue = inputChannels[outputSelection[3]];

                // 设置新颜色
                Color newColor = new Color(rValue, gValue, bValue, aValue);
                combinedTexture.SetPixel(x, y, newColor);
            }
        }

        combinedTexture.Apply();
        return combinedTexture;
    }



    private Texture2D CombineChannels(Texture2D rChannel, Texture2D gChannel, Texture2D bChannel, Texture2D aChannel)
    {
        if (rChannel == null && gChannel == null && bChannel == null && aChannel == null)
        {
            Debug.LogWarning("Please select at least one valid channel!");
            return null;
        }

        int width = rChannel ? rChannel.width : (gChannel ? gChannel.width : (bChannel ? bChannel.width : (aChannel != null ? aChannel.width : 256)));
        int height = rChannel ? rChannel.height : (gChannel ? gChannel.height : (bChannel ? bChannel.height : (aChannel != null ? aChannel.height : 256)));

        Texture2D combinedTexture = new Texture2D(width, height);

        for (int x = 0; x < width; x++)
        {
            for (int y = 0; y < height; y++)
            {
                float rValue = rChannel ? rChannel.GetPixel(x, y).r : 0;
                float gValue = gChannel ? gChannel.GetPixel(x, y).g : 0;
                float bValue = bChannel ? bChannel.GetPixel(x, y).b : 0;
                float aValue = aChannel ? aChannel.GetPixel(x, y).a : 1;

                Color newColor = new Color(rValue, gValue, bValue, aValue);
                combinedTexture.SetPixel(x, y, newColor);
            }
        }

        combinedTexture.Apply();
        return combinedTexture;
    }

    private float GetChannelValue(Color pixel, int channelType)
    {
        switch (channelType)
        {
            case 1: return pixel.r; // Metallic or R channel
            case 2: return pixel.g; // Roughness or G channel
            case 3: return pixel.b; // AO or B channel
            case 4: return pixel.a; // Emission or A channel
            default: return 0; // None
        }
    }

private void ExportSplitTextures(Texture2D[] splitTextures, string[] names, ref string exportPath)
{
    for (int i = 0; i < 4; i++) // 确保只处理 4 个通道
    {
        if (splitTextures[i] != null && !string.IsNullOrEmpty(names[i]))
        {
            // 如果路径为空（首次导出），让用户选择路径
            if (string.IsNullOrEmpty(exportPath))
            {
                exportPath = EditorUtility.SaveFolderPanel(
                    "Select Export Folder", // 对话框标题
                    Application.dataPath,   // 默认路径
                    ""                      // 默认文件夹名称
                );

                // 如果用户取消选择路径，停止导出
                if (string.IsNullOrEmpty(exportPath))
                {
                    Debug.LogWarning($"Export cancelled for Channel {i + 1}. No further channels will be exported.");
                    return;
                }
            }

            // 构建完整的文件路径
            string fullPath = System.IO.Path.Combine(exportPath, $"{names[i]}.png");

            // 保存通道纹理
            SaveTextureToPath(splitTextures[i], fullPath);
            Debug.Log($"Channel {i + 1} exported to: {fullPath}");
        }
        else if (string.IsNullOrEmpty(names[i]))
        {
            Debug.LogWarning($"Channel {i + 1} skipped because no file name was provided.");
        }
    }
}




private void SaveTextureToPath(Texture2D texture, string fullPath)
{
    if (texture == null)
    {
        Debug.LogWarning("Cannot save a null texture.");
        return;
    }

    try
    {
        // 确保目标文件夹存在
        string directory = System.IO.Path.GetDirectoryName(fullPath);
        if (!System.IO.Directory.Exists(directory))
        {
            System.IO.Directory.CreateDirectory(directory);
        }

        // 保存纹理为 PNG
        byte[] bytes = texture.EncodeToPNG();
        System.IO.File.WriteAllBytes(fullPath, bytes);
        AssetDatabase.Refresh();
        Debug.Log($"Texture saved to: {fullPath}");
    }
    catch (Exception ex)
    {
        Debug.LogError($"Failed to save texture to path: {fullPath}\n{ex.Message}");
    }
}





private void ExportTextureWithCustomPath(Texture2D texture, ref string exportPath, string defaultFileName)
{
    if (texture == null)
    {
        Debug.LogWarning("No texture available to export!");
        return;
    }

    // 打开保存文件对话框
    exportPath = EditorUtility.SaveFilePanel("Save Texture", string.IsNullOrEmpty(exportPath) ? Application.dataPath : exportPath, defaultFileName, "png");

    if (!string.IsNullOrEmpty(exportPath))
    {
        SaveTextureToPath(texture, exportPath);
        Debug.Log($"Texture exported to: {exportPath}");
    }
    else
    {
        Debug.LogWarning("Export cancelled by the user.");
    }
}



 private void ExportTexture(Texture2D texture, string fileName)
{
    if (texture == null)
    {
        Debug.LogWarning("No combined texture available to export!");
        return;
    }

    string path = $"Assets/CombinedTexture/{fileName}.png";
    SaveTextureToPath(texture, path);
    Debug.Log($"Texture exported to {path}");
}


    private string[] GetSelectedTextureOptions(int[] selection)
    {
        if (selection == null || selection.Length != 4)
        {
            Debug.LogError("Invalid selection array. Must have exactly 4 elements.");
            return new string[4] { "None", "None", "None", "None" }; // 确保返回数组长度为4
        }

        HashSet<int> uniqueIndices = new HashSet<int>(selection);
        List<string> selectedOptions = new List<string>();

        foreach (int index in uniqueIndices)
        {
            if (index >= 0 && index < textureOptions.Length)
            {
                selectedOptions.Add(textureOptions[index]);
            }
        }

        // 如果选项数量不足 4 个，填充 "None" 保持长度一致
        while (selectedOptions.Count < 4)
        {
            selectedOptions.Add("None");
        }

        return selectedOptions.ToArray();
    }


    private void ShowPreview(Texture2D texture, ref Texture2D previewTexture)
    {
        previewTexture = texture;

        GUILayout.Space(10);
        GUILayout.Label("Preview:", EditorStyles.boldLabel);

        if (previewTexture != null)
        {
            GUILayout.Box(previewTexture, GUILayout.Width(128), GUILayout.Height(128));  // 在窗口中显示缩略图
        }
        else
        {
            GUILayout.Label("No preview available.");
        }
    }


    private Texture2D GetCurrentPreviewTexture()
    {
        //Debug.Log(currentTab);
        {
            
        }
        switch (currentTab)
        {
            case 0: 
                return quickConvertPreviewTexture;  // 返回 Quick Convert 模式的预览贴图
            case 1: 
                return splitModePreviewTexture;     // 返回 Split 模式的预览贴图
            case 2: 
                return manualCombinationPreviewTexture;  // 返回 Manual Combination 模式的预览贴图
            default: 
                return null;
        }
    }


    private void EnsureTextureIsReadable(Texture2D texture)
    {
        if (texture == null) return;

        string path = AssetDatabase.GetAssetPath(texture);
        TextureImporter textureImporter = AssetImporter.GetAtPath(path) as TextureImporter;
        if (textureImporter != null && !textureImporter.isReadable)
        {
            textureImporter.isReadable = true;
            AssetDatabase.ImportAsset(path, ImportAssetOptions.ForceUpdate);
        }
    }
   

}
